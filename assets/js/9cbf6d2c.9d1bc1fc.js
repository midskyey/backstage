/*! For license information please see 9cbf6d2c.9d1bc1fc.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[168360],{128234:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=i(474848),a=i(28453);const o={title:"Adopter Spotlight: Level-up developer experience with observability and security in context",author:"Johannes Br\xe4uer, Dynatrace",authorURL:"https://github.com/johannes-b",authorImageURL:"https://avatars.githubusercontent.com/u/729071?v=4"},r=void 0,s={permalink:"/blog/2024/09/24/dynatrace-adopter-spotlight",source:"@site/blog/2024-09-24-dynatrace-adopter-spotlight.mdx",title:"Adopter Spotlight: Level-up developer experience with observability and security in context",description:"TL;DR",date:"2024-09-24T00:00:00.000Z",tags:[],readingTime:7.79,hasTruncateMarker:!0,authors:[{name:"Johannes Br\xe4uer, Dynatrace",url:"https://github.com/johannes-b",imageURL:"https://avatars.githubusercontent.com/u/729071?v=4",key:null,page:null}],frontMatter:{title:"Adopter Spotlight: Level-up developer experience with observability and security in context",author:"Johannes Br\xe4uer, Dynatrace",authorURL:"https://github.com/johannes-b",authorImageURL:"https://avatars.githubusercontent.com/u/729071?v=4"},unlisted:!1,prevItem:{title:"Backstage in Salt Lake City: Highlights from BackstageCon and KubeCon + CloudNativeCon North America 2024",permalink:"/blog/2024/12/09/kubecon-slc-24"},nextItem:{title:"1,186 days with Backstage: A journey through the eyes of a developer",permalink:"/blog/2024/06/27/backstage-engineer-journey"}},l={authorsImageUrls:[void 0]},c=[{value:"Why and how Dynatrace rolled out Backstage",id:"why-and-how-dynatrace-rolled-out-backstage",level:2},{value:"Quick wins with ownership democratization and self-service templates",id:"quick-wins-with-ownership-democratization-and-self-service-templates",level:2},{value:"Static model enrichment with real-time observability and security",id:"static-model-enrichment-with-real-time-observability-and-security",level:2},{value:"Coverage of the software development lifecycle",id:"coverage-of-the-software-development-lifecycle",level:3},{value:"Kubernetes observability",id:"kubernetes-observability",level:3},{value:"Reliability and security in context",id:"reliability-and-security-in-context",level:3},{value:"Error logs at hand",id:"error-logs-at-hand",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"What`s next?",id:"whats-next",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"TL;DR"}),"\nTo enhance the developer experience, Dynatrace adopted Backstage as its central developer portal and enhances Backstage entities with real-time data. This decision, along with the symbiosis between the Dynatrace platform and Backstage, has unlocked two significant opportunities."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"First, centralizing all development-related artifacts and democratizing ownership have reduced onboarding time for our teams."}),"\n",(0,n.jsx)(t.li,{children:"Second, we enhanced the developer experience by integrating observability and security data into Backstage, offering seamless entry points to Dynatrace for in-depth analysis."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Dynatrace adopting Backstage",src:i(48331).A+"",width:"1800",height:"945"})}),"\n","\n",(0,n.jsx)(t.h2,{id:"why-and-how-dynatrace-rolled-out-backstage",children:"Why and how Dynatrace rolled out Backstage"}),"\n",(0,n.jsx)(t.p,{children:"A few years ago, Dynatrace developers worked with large monolithic repositories to develop functionality for our platform\u2019s agent and server sides. The server component was particularly large, consisting of 260 Gradle projects in a single repository. This setup centralized development processes for the developers, making it easier for them to push the code while versioning, delivery, and hotfixes were handled automatically. However, maintaining the speed and manageability of these processes required a lot of effort."}),"\n",(0,n.jsxs)(t.p,{children:["Dynatrace decided to move towards the current Dynatrace platform model as the next evolutionary step of our product. This decision led to an architectural change of splitting the monolithic repository into multiple projects. The platform is designed to enable the development of apps on top of platform capabilities to unlock faster innovations and decouple them from the release cycles of other components. Based on this decision, it became apparent that the number of platform components and individual apps would increase significantly, eliminating the option of a single repository to unify all processes. Besides, the risk of increasing cognitive load in software development was high due to development being spread across multiple touchpoints, a challenge discussed in research for years (",(0,n.jsx)(t.a,{href:"https://doi.org/10.1016/0364-0213(88)90023-7",children:"Sweller, 1988"}),", ",(0,n.jsx)(t.a,{href:"https://dl.acm.org/doi/10.5555/1388398",children:"Robert, 2008"}),"). Consequently, the need to standardize project creation became crucial to ensure corporate governance and compliance even before the first commit was pushed."]}),"\n",(0,n.jsx)(t.p,{children:"Therefore, the Dynatrace Platform Engineering team initiated a project to standardize and simplify the process for starting service or application development. This effort was initially named \u201cproject initializer\u201d and launched around the same time Backstage joined the CNCF. Although the platform engineering team saw initial success with the project initializer, we quickly realized that there was a greater demand for centralizing development activities and providing appropriate guidelines. For example, we noted that the complexity of integrating new code had shifted from the build phase to the deployment phase, transferring relatively complex integration tasks from continuous integration to continuous deployment. Overall, the main requirements and focal points were:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Ownership"}),": Who is responsible for which service or app? Who owns infrastructure resources?"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Documentation"}),": Where is the documentation of a service or app?"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"CI/CD view"}),": How does the build pipeline in GitHub/Jenkins progress, and what about the ArgoCD deployment?"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Dependency management"}),": Do we know which APIs are used?"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Observability and security"}),": Where is a service deployed, and is it healthy and secure?"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["For more details on Dynatrace's adoption of Backstage, please watch the recording, ",(0,n.jsx)(t.a,{href:"https://www.youtube.com/watch?v=0or5K_3HieA",children:"How We Made Backstage Improve Developer Efficiency of 1000+ Engineers"}),", BackstageCon, November 6, 2023 in Chicago. Illinois."]}),"\n",(0,n.jsx)(t.h2,{id:"quick-wins-with-ownership-democratization-and-self-service-templates",children:"Quick wins with ownership democratization and self-service templates"}),"\n",(0,n.jsx)(t.p,{children:"The discussion on whether to make, buy, or adopt led us to heavily favor Backstage as the chosen solution for our internal developer platform (IDP). We have successfully integrated Backstage within Dynatrace, marking our early wins. This was accomplished by linking it to our internal team management solution. Feeding this data into Backstage resolved the previously lacking transparency concerning the responsibilities and ownership of services and infrastructure. Furthermore, we have contextualized Stack Overflow and CI/CD solutions with entities monitored by Backstage to fulfill developers' requests for a unified view."}),"\n",(0,n.jsx)(t.p,{children:"Next to establishing a solid software catalog view, providing self-service templates for project and infrastructure creation\u2014initially a focus of the original developer experience\u2014has also been incorporated into Backstage. This enhancement allows the use of a comprehensive set of templates for bootstrapping platform services or applications across different tool stacks. Ultimately, developers can effortlessly use a template to create a ready-to-use repository with observability and security pre-configured."}),"\n",(0,n.jsx)(t.h2,{id:"static-model-enrichment-with-real-time-observability-and-security",children:"Static model enrichment with real-time observability and security"}),"\n",(0,n.jsx)(t.p,{children:"After addressing ownership, documentation, and a centralized CI/CD view, our developers highlighted the necessity of accessing real-time data about their services and applications within the Backstage service catalog. This need arose from the understanding that integrating a code change can be optimally evaluated on a deployed version of their service alongside related components. Specifically, the developers were interested in seeing at a high level:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Where specific versions of services are deployed,"}),"\n",(0,n.jsx)(t.li,{children:"How their services perform in the hardening phase and production environments,"}),"\n",(0,n.jsx)(t.li,{children:"Which inbound and outbound dependencies their service has,"}),"\n",(0,n.jsx)(t.li,{children:"Whether any problems, security vulnerabilities, or SLO breaches are related to their service, and"}),"\n",(0,n.jsx)(t.li,{children:"Which recent error logs have been collected."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"The open source community already developed a Backstage plugin capable of fetching Dynatrace problems and synthetics into Backstage. However, we chose to develop a new plugin that works with the new Dynatrace platform API. Additionally, it was necessary to support Kubernetes use cases by default to offer, for example, deployment overviews out-of-the-box. Based on the feedback from developers, we identified four essential requirements."}),"\n",(0,n.jsx)(t.h3,{id:"coverage-of-the-software-development-lifecycle",children:"Coverage of the software development lifecycle"}),"\n",(0,n.jsx)(t.p,{children:"Observing the software development lifecycle necessitates consolidating all development and delivery phases. In Dynatrace, monitoring the development stage is distinct from rolling out new versions to the hardening and production stages. Nonetheless, developers desire an end-to-end view from development to production. To support this, the plugin allows connections to multiple Dynatrace environments to retrieve data for the various rollout phases."}),"\n",(0,n.jsx)(t.h3,{id:"kubernetes-observability",children:"Kubernetes observability"}),"\n",(0,n.jsxs)(t.p,{children:["When using the Backstage Kubernetes plugin, an annotation is required to surface your Kubernetes components as part of an entity (for more information, please refer to ",(0,n.jsx)(t.a,{href:"https://backstage.io/docs/features/kubernetes/configuration/#surfacing-your-kubernetes-components-as-part-of-an-entity",children:"Backstage documentation"}),"). The Dynatrace plugin utilizes this convention to automatically populate monitoring data from Kubernetes deployments into the deployment overview in Backstage. Therefore, additional configuration is unnecessary to enrich Backstage entities with real-time observability data from Kubernetes, as shown below. Additionally, deep links open Dynatrace analysis views for more contextual details."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Kubernetes deployment overview",src:i(224123).A+"",width:"1920",height:"1080"})}),"\n",(0,n.jsx)(t.h3,{id:"reliability-and-security-in-context",children:"Reliability and security in context"}),"\n",(0,n.jsxs)(t.p,{children:["While Kubernetes observability was requested to be provided out of the box, we quickly realized that developers prefer to define the insights they want to see by themselves. To remain flexible and to reduce the customization effort required from the platform engineering teams, the plugin allows for the definition of custom queries within the ",(0,n.jsx)(t.code,{children:"config.yaml"})," file. The Backstage ",(0,n.jsx)(t.code,{children:"config.yaml"})," file requires special attention since platform teams use this file to standardize entity specifications, while developers use it to customize their Backstage views. After releasing this new functionality, we observed developers moving in two distinct directions:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Querying quality gate validation results of a new version they\u2019re developing"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Release validation overview",src:i(986587).A+"",width:"1920",height:"1080"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Fetching runtime security vulnerability information across different stages"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Security vulnerabilities in context",src:i(946826).A+"",width:"1920",height:"1080"})}),"\n",(0,n.jsx)(t.h3,{id:"error-logs-at-hand",children:"Error logs at hand"}),"\n",(0,n.jsx)(t.p,{children:"Developers love logs. Direct access to logs, especially error logs, was a crucial requirement for the plugin. Our developers want to see the current number of error logs accompanied by a direct link to the raw log line, which provides significant value in problem triaging and fixing. With the plugin, we offer a high-level overview of log statistics, with the rich analysis capabilities of Dynatrace available at a single click."}),"\n",(0,n.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsx)(t.p,{children:"To enhance the developer experience, Dynatrace adopted Backstage as its central developer portal and enhances Backstage entities with real-time data. This decision, along with the symbiosis between the Dynatrace platform and Backstage, has unlocked two significant opportunities."}),"\n",(0,n.jsx)(t.p,{children:"First, centralizing all development-related artifacts and democratizing ownership have reduced onboarding time for our teams. Although it might seem that onboarding time is only relevant for new developers, it is also important when developers move to a different team, pick up a service or application they haven\u2019t worked on for a while, or replace their laptops. Moreover, a low onboarding time is crucial when quickly kicking off work on a new service or solution app. This became a necessity with the new Dynatrace platform."}),"\n",(0,n.jsx)(t.p,{children:"Second, we enhanced the developer experience by integrating observability and security data into Backstage, offering seamless entry points to Dynatrace for in-depth analysis. This improvement was crucial as we noted a shift in integration tasks from build to development time, necessitating insights into a later phase of the software lifecycle for our developers. In essence, end-to-end validation of code changes could no longer be accomplished with build pipelines\u2014either in Jenkins or GitHub\u2014but required deployment in production-like environments that facilitate real-world interaction with other components. Consequently, real-time observability data from these environments must be relayed to the developer."}),"\n",(0,n.jsx)(t.h2,{id:"whats-next",children:"What`s next?"}),"\n",(0,n.jsxs)(t.p,{children:["Backstage is a crucial element for Dynatrace's developer experience, providing out-of-the-box core functionality for every developer and supporting extensibility where needed. Our Backstage extension is maintained as an open-source project and is available for every Backstage user. Don't hesitate to utilize it or to contribute: ",(0,n.jsx)(t.a,{href:"https://github.com/Dynatrace/backstage-plugin",children:"https://github.com/Dynatrace/backstage-plugin"})]}),"\n",(0,n.jsx)(t.p,{children:"If you have a great Backstage story to tell, please share your experience with us to the variety of use case areas."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},221020:(e,t,i)=>{var n=i(296540),a=Symbol.for("react.element"),o=Symbol.for("react.fragment"),r=Object.prototype.hasOwnProperty,s=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,i){var n,o={},c=null,d=null;for(n in void 0!==i&&(c=""+i),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(d=t.ref),t)r.call(t,n)&&!l.hasOwnProperty(n)&&(o[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===o[n]&&(o[n]=t[n]);return{$$typeof:a,type:e,key:c,ref:d,props:o,_owner:s.current}}t.Fragment=o,t.jsx=c,t.jsxs=c},474848:(e,t,i)=>{e.exports=i(221020)},946826:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/backstage_catalog_security_vulnerabilities-b821faeb470f81d5deecc30bef5312e9.png"},224123:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/backstage_dynatrace_plugin_K8s-0d79971d1a836d9852e5b1c9f2114082.png"},986587:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/backstage_srg_validations-b758320828e99579c1406710a5061e39.png"},48331:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/com0027.Dynatrace.Adopter-76144e319e5924be0cda3c36695735e2.png"},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>s});var n=i(296540);const a={},o=n.createContext(a);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);