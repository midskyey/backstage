/*! For license information please see d2beca7d.3d0bca72.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[260719],{386439:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var t=i(474848),r=i(28453);const s={id:"auditor",title:"Auditor Service",sidebar_label:"Auditor",description:"Documentation for the Auditor service"},o=void 0,c={id:"backend-system/core-services/auditor",title:"Auditor Service",description:"Documentation for the Auditor service",source:"@site/../docs/backend-system/core-services/auditor.md",sourceDirName:"backend-system/core-services",slug:"/backend-system/core-services/auditor",permalink:"/docs/next/backend-system/core-services/auditor",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/backend-system/core-services/auditor.md",tags:[],version:"current",frontMatter:{id:"auditor",title:"Auditor Service",sidebar_label:"Auditor",description:"Documentation for the Auditor service"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/next/backend-system/core-services/index"},next:{title:"Auth",permalink:"/docs/next/backend-system/core-services/auth"}},d={},l=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"How it Works",id:"how-it-works",level:2},{value:"Usage Guidance",id:"usage-guidance",level:2},{value:"Using the Service",id:"using-the-service",level:2},{value:"Naming Conventions",id:"naming-conventions",level:2},{value:"Common Meta Keys and Values",id:"common-meta-keys-and-values",level:2},{value:"Audit Event Examples",id:"audit-event-examples",level:2},{value:"Practical Examples for Auditor Implementation",id:"practical-examples-for-auditor-implementation",level:2},{value:"Severity Log Level Mappings",id:"severity-log-level-mappings",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Severity Levels and Default Mappings",id:"severity-levels-and-default-mappings",level:3}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["This document describes the Auditor Service, a core service designed to record and report on security-relevant events within an application. By default, this service utilizes the ",(0,t.jsx)(n.code,{children:"rootLogger"})," core service for logging."]}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Provides a standardized way to capture security events."}),"\n",(0,t.jsx)(n.li,{children:"Allows categorization of events by severity level."}),"\n",(0,t.jsx)(n.li,{children:"Supports detailed metadata for each event."}),"\n",(0,t.jsx)(n.li,{children:"Offers success/failure reporting for events."}),"\n",(0,t.jsx)(n.li,{children:"Integrates with authentication and plugin services for enhanced context."}),"\n",(0,t.jsx)(n.li,{children:"Provides a service factory for easy integration with Backstage plugins."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How it Works"}),"\n",(0,t.jsxs)(n.p,{children:["The Auditor Service defines a class, ",(0,t.jsx)(n.code,{children:"Auditor"}),", which implements the ",(0,t.jsx)(n.code,{children:"AuditorService"})," interface. This class uses a ",(0,t.jsx)(n.code,{children:"logFn"})," to log audit events with varying levels of severity and associated metadata. It also integrates with authentication and plugin services to capture actor details and plugin context."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"auditorServiceFactory"})," wraps the ",(0,t.jsx)(n.code,{children:"rootLogger"})," core service and provides a factory function for creating child loggers for individual plugins. This allows each plugin to have its own logger with inherited and additional metadata."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-guidance",children:"Usage Guidance"}),"\n",(0,t.jsx)(n.p,{children:"The Auditor Service is designed for recording security-relevant events that require special attention or are subject to compliance regulations. These events often involve actions like:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"User session management"}),"\n",(0,t.jsx)(n.li,{children:"Data access and modification"}),"\n",(0,t.jsx)(n.li,{children:"System configuration changes"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For general application logging that is not security-critical, you should use the standard ",(0,t.jsx)(n.code,{children:"LoggerService"})," provided by Backstage. This helps to keep your audit logs focused and relevant."]}),"\n",(0,t.jsx)(n.h2,{id:"using-the-service",children:"Using the Service"}),"\n",(0,t.jsx)(n.p,{children:"The Auditor Service can be accessed via dependency injection in your Backstage plugin. Here's an example of how to access the service and create an audit event within an Express route handler:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const { auditor } = options;\n\n  const router = Router();\n  router.use(express.json());\n\n  router.post('/my-endpoint', async (req, res) => {\n    const auditorEvent = await auditor.createEvent({\n      eventId: 'my-endpoint-call',\n      request: req,\n      meta: {\n        // ... metadata about the request\n      },\n    });\n\n    try {\n      // ... process the request\n\n      await auditorEvent.success();\n      res.status(200).json({ message: 'Succeeded!' });\n    } catch (error) {\n      await auditorEvent.fail({ error });\n      res.status(500).json({ message: 'Failed!' });\n      throw error;\n    }\n  });\n\n  return router;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, an audit event is created for each request to ",(0,t.jsx)(n.code,{children:"/my-endpoint"}),". The ",(0,t.jsx)(n.code,{children:"success"})," or ",(0,t.jsx)(n.code,{children:"fail"})," methods are called based on the outcome of processing the request."]}),"\n",(0,t.jsx)(n.h2,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,t.jsx)(n.p,{children:"When defining audit events, follow these guidelines to ensure consistency and clarity:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use kebab-case:"})," Event IDs should be in kebab-case (e.g., ",(0,t.jsx)(n.code,{children:"user-session"}),", ",(0,t.jsx)(n.code,{children:"file-download"}),", ",(0,t.jsx)(n.code,{children:"entity-fetch"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"eventId"})," for Logical Grouping:"]})," The ",(0,t.jsx)(n.code,{children:"eventId"})," represents a broad category or logical group of related operations. For example, ",(0,t.jsx)(n.code,{children:"entity-fetch"})," would group all entity retrieval events. ",(0,t.jsx)(n.code,{children:"location-mutate"})," would group all actions that mutate a location."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"meta.queryType"})," (or related field) for Specific Actions within a Group:"]})," Use a ",(0,t.jsx)(n.code,{children:"meta"})," field (like ",(0,t.jsx)(n.code,{children:"queryType"}),", ",(0,t.jsx)(n.code,{children:"actionType"})," or similar) to specify the particular action or query that occurred within the broader ",(0,t.jsx)(n.code,{children:"eventId"})," group.\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["For instance, with ",(0,t.jsx)(n.code,{children:"eventId: entity-fetch"}),", use ",(0,t.jsx)(n.code,{children:"meta: { queryType: 'by-id' }"})," to represent fetching an entity by its ID. Other examples could be:\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"meta: { queryType: 'all' }"})," for fetching all entities."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"meta: { queryType: 'by-query' }"})," for fetching entities by a query."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"meta: { actionType: 'delete' }"})," for ",(0,t.jsx)(n.code,{children:"eventId: entity-mutate"})," when an entity was deleted."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"meta: { actionType: 'create' }"})," for ",(0,t.jsx)(n.code,{children:"eventId: location-mutate"})," when a location was added."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"meta"})," fields to add more context to the event being tracked."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Avoid Redundant Prefixes:"})," Do not include redundant prefixes related to the plugin ID in your event names. The plugin context is already provided separately."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clear and Concise:"})," Choose names that clearly and concisely describe the event being audited."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-meta-keys-and-values",children:"Common Meta Keys and Values"}),"\n",(0,t.jsxs)(n.p,{children:["The following table details common keys found within the ",(0,t.jsx)(n.code,{children:"meta"})," object of audit events and their formats:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Key"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Format"}),(0,t.jsx)(n.th,{children:"Example(s)"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"queryType"})}),(0,t.jsx)(n.td,{children:"Specifies the type of query performed when fetching data."}),(0,t.jsx)(n.td,{children:"A kebab-case string"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"all"}),", ",(0,t.jsx)(n.code,{children:"by-id"}),", ",(0,t.jsx)(n.code,{children:"by-name"}),", ",(0,t.jsx)(n.code,{children:"by-query"}),", ",(0,t.jsx)(n.code,{children:"by-refs"}),", ",(0,t.jsx)(n.code,{children:"ancestry"}),", ",(0,t.jsx)(n.code,{children:"by-entity"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"actionType"})}),(0,t.jsx)(n.td,{children:"Specifies the type of action performed when modifying data."}),(0,t.jsx)(n.td,{children:"A kebab-case string"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"create"}),", ",(0,t.jsx)(n.code,{children:"delete"}),", ",(0,t.jsx)(n.code,{children:"refresh"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"entityRef"})}),(0,t.jsx)(n.td,{children:"The full reference of an entity, including kind, namespace, and name."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"[kind]:[namespace]/[name]"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"component:default/my-component"}),", ",(0,t.jsx)(n.code,{children:"group:my-org/team-a"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"locationRef"})}),(0,t.jsx)(n.td,{children:"A specific reference to a location being operated on."}),(0,t.jsx)(n.td,{children:"Any string representing the location."}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"url:https://example.com/catalog-info.yaml"}),", ",(0,t.jsx)(n.code,{children:"custom:default/my-location"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"uid"})}),(0,t.jsx)(n.td,{children:"The unique identifier of a location or other object involved in the operation."}),(0,t.jsx)(n.td,{children:"Any valid unique ID string"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"9a4e740b-e557-427f-b9f2-0d4f092b1c1e"})})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"By following these conventions, you create a more structured and informative audit trail that is easier to search, filter, and understand. This allows you to better group and understand the events being logged."}),"\n",(0,t.jsx)(n.h2,{id:"audit-event-examples",children:"Audit Event Examples"}),"\n",(0,t.jsx)(n.p,{children:"To illustrate how these naming conventions and the meta field are used in practice, the following examples demonstrate typical audit events for common operations."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Typical Read Operation Example:"})}),"\n",(0,t.jsx)(n.p,{children:"For an operation that fetches all entities, a typical audit event would look like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "eventId": "entity-fetch",\n  "meta": {\n    "queryType": "all"\n  }\n  ...\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Typical Write Operation Example:"})}),"\n",(0,t.jsx)(n.p,{children:"For an operation that deletes an entity, a typical audit event would look like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "eventId": "entity-mutate",\n  "meta": {\n    "actionType": "delete",\n    "uid": "some-entity-uid",\n    "entityRef": "component:default/petstore"\n  },\n  "severityLevel": "medium"\n  ...\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"practical-examples-for-auditor-implementation",children:"Practical Examples for Auditor Implementation"}),"\n",(0,t.jsx)(n.p,{children:"To clarify how to utilize the Auditor feature effectively, we recommend exploring the Catalog Backend. It offers two valuable resources:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code Implementation Example (createRouter.ts):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.a,{href:"https://github.com/backstage/backstage/blob/master/plugins/catalog-backend/src/service/createRouter.ts",children:(0,t.jsx)(n.code,{children:"createRouter.ts"})})," file within the Catalog Backend showcases a practical integration of the ",(0,t.jsx)(n.code,{children:"AuditorService"})," within a Backstage backend plugin."]}),"\n",(0,t.jsxs)(n.li,{children:["Specifically, the lines that demonstrate the creation of an audit event. This includes setting critical parameters such as ",(0,t.jsx)(n.code,{children:"eventId"})," and ",(0,t.jsx)(n.code,{children:"severityLevel"}),", as well as incorporating relevant metadata like ",(0,t.jsx)(n.code,{children:"queryType"})," and ",(0,t.jsx)(n.code,{children:"entityRef"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation Example (README.md):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:['The "Audit Events" section of the Catalog Backend\'s ',(0,t.jsx)(n.a,{href:"https://github.com/backstage/backstage/blob/master/plugins/catalog-backend/README.md#audit-events",children:(0,t.jsx)(n.code,{children:"README.md"})})," provides a well-structured example of documenting emitted audit events."]}),"\n",(0,t.jsxs)(n.li,{children:["It illustrates how to detail various ",(0,t.jsx)(n.code,{children:"eventId"})," values and their corresponding ",(0,t.jsx)(n.code,{children:"meta"})," fields (e.g., ",(0,t.jsx)(n.code,{children:"queryType"}),", ",(0,t.jsx)(n.code,{children:"actionType"}),") for different plugin operations."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["These examples provide both a code-level demonstration and a documentation guideline for effectively utilizing the ",(0,t.jsx)(n.code,{children:"AuditorService"})," to manage audit events within your Backstage plugins."]}),"\n",(0,t.jsx)(n.h2,{id:"severity-log-level-mappings",children:"Severity Log Level Mappings"}),"\n",(0,t.jsxs)(n.p,{children:["The Auditor Service provides a way for plugins to log significant events, categorized by their severity. The ",(0,t.jsx)(n.code,{children:"severityLogLevelMappings"})," configuration option enables you to customize how these severity levels are mapped to actual log levels within your Backstage backend, giving you precise control over the verbosity of your audit logs."]}),"\n",(0,t.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"severityLogLevelMappings"})," are configured under the ",(0,t.jsx)(n.code,{children:"backend.auditor"})," section of your ",(0,t.jsx)(n.code,{children:"app-config.yaml"})," file. This structure allows you to specify the log level for each severity level supported by the Auditor Service. You can override individual severity levels without changing the entire mapping."]}),"\n",(0,t.jsx)(n.p,{children:"Example configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"backend:\n  auditor:\n    severityLogLevelMappings:\n      low: debug\n      medium: info\n      high: warn\n      critical: error\n"})}),"\n",(0,t.jsx)(n.h3,{id:"severity-levels-and-default-mappings",children:"Severity Levels and Default Mappings"}),"\n",(0,t.jsx)(n.p,{children:"The Auditor Service supports the following severity levels:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"low"}),": Represents low-importance events, typically informational or debug-level."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"medium"}),": Represents events of moderate importance, requiring some attention."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"high"}),": Represents high-importance events, potentially indicating a problem or security issue."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"critical"}),": Represents critical events, requiring immediate attention."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"By default, these severity levels are mapped to the following log levels:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"low"}),": ",(0,t.jsx)(n.code,{children:"debug"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"medium"}),": ",(0,t.jsx)(n.code,{children:"info"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"high"}),": ",(0,t.jsx)(n.code,{children:"info"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"critical"}),": ",(0,t.jsx)(n.code,{children:"info"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"As a result, medium, high, and critical events are logged as info-level events by default, while low-level events are treated as debug."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},221020:(e,n,i)=>{var t=i(296540),r=Symbol.for("react.element"),s=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,c=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,i){var t,s={},l=null,a=null;for(t in void 0!==i&&(l=""+i),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(a=n.ref),n)o.call(n,t)&&!d.hasOwnProperty(t)&&(s[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===s[t]&&(s[t]=n[t]);return{$$typeof:r,type:e,key:l,ref:a,props:s,_owner:c.current}}n.Fragment=s,n.jsx=l,n.jsxs=l},474848:(e,n,i)=>{e.exports=i(221020)},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var t=i(296540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);